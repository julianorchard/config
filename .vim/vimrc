" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! VIMRC !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! "
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "
"         File:       vimrc                                                    "
"         Author:     julianorchard <hello@julianorchard.co.uk>                "
"         Tag Added:  2022-03-14                                               "
"         Desciption: My vimrc file, stored in ~/.vim/vimrc, always.           "
" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "

set all&
set viminfo+=n~/.vim/viminfo

" Auto-copy vimrc to win location if Cygwin
if expand('%:p:h') =~ '.vim' && has('win32unix')
  if !isdirectory($HOME . "/vimfiles/")
    call mkdir($HOME . "/vimfiles/", "p")
  en
  silent !cp ~/.vim/vimrc ~/vimfiles/vimrc
  silent !cp ~/.vim/gvimrc ~/vimfiles/gvimrc
en

" Vim plug load
if empty(glob('~/.vim/autoload/plug.vim'))
  if has('win32unix') || has('unix')
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    aug PLUG
      au!
      au VimEnter * PlugInstall --sync | so $MYVIMRC
    aug END
  el
    echom "You are on windows"
  en
en

" Plugins:
call plug#begin('~/.vim/plugged')
  Plug 'tpope/vim-sensible'
  " Appearance
  Plug 'franbach/miramare'
  Plug 'junegunn/goyo.vim'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'
  " Text Manipulation
  Plug 'mg979/vim-visual-multi'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  " Fzf
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  " Coc completion
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

let mapleader = " "

" Coc configuration ------------------------------------------------------------

" Tab cycling options:
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
" Make <CR> to accept selected completion item
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Trigger completion (c-space)
inoremap <silent><expr> <c-@> coc#refresh()
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> <leader>[ <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>] <Plug>(coc-diagnostic-next)
" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Colourscheme
" if !has('gui_running') && &term =~ '\%(screen\|tmux\)'
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
" endif
set termguicolors
let g:miramare_enable_italic = 1
let g:miramare_disable_italic_comment = 1
colorscheme miramare
autocmd vimenter * hi Normal guibg=NONE ctermbg=NONE
autocmd vimenter * hi EndOfBuffer guibg=NONE ctermbg=NONE


let g:airline_theme='alduin'

"Closetag Extensions
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.php'

" Non-plugin configs
syntax on
set signcolumn=yes          " for coc.vim
set popt=paper:A4           " print options
set noeb vb t_vb=           " no error bells
set enc=utf8                " file encoding
set history=1000            " command (:) hist
set mouse=                  " mouset (default)
set nosm                    " matching bracket on insert
set nosol                   " jump to rough current cursor position
set noswapfile              " yep
set shm=a                   " avoid all 'hit enter to continue'
set title                   " title bar title (content below)
set titlestring=vim:\ %-25.55F\ %a%r%m titlelen=70
set tf                      " better xterm mainly experience
set backspace=indent,eol,start

" Remove trailing spaces on buffer write
aug RTS
  au!
  au BufWritePre * :%s/\s\+$//e
aug END

" Return cursor to last point in the file
aug ReturnToPoint
  au!
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
aug END

" Persistent file history
if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
en

" Wrapping and linebreaks
set fo+=q fo+=t
if has("autocmd")
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
en
set nolist
set scrolloff=13
set textwidth=80

" Shifting
set autoindent
set shiftround
set smartindent
if has("autocmd")
  filetype plugin indent on
en
set cpoptions  +=I

" Line number things
set number
set relativenumber

" Search things
set hlsearch
set ic
set incsearch
set showmatch

" I like colourcolumn
set colorcolumn="80"

" Visual mode
set list lcs=tab:\|\ ,nbsp:‚ê£
set ts=2 shiftwidth=2 et
vn <tab> >vgv
vn <s-tab> <vgv
nn j gj
nn k gk
vn j gj
vn k gk

" Split navigation with C-{hjkl}
nn <c-j> <C-W><C-J>
nn <c-k> <C-W><C-K>
nn <c-l> <C-W><C-L>
nn <c-h> <C-W><C-H>

" ~~~~~~~~~~~~~~~~~~~ COMM, CENTER COMMENTS IN NORMAL MODE ~~~~~~~~~~~~~~~~~~~ "
fun! s:CenterComment(...) abort
  " Comment Strings (thank you again, commentary.vim...)
    let [l,r] = split(get(b:, 'commentary_format', substitute(substitute(substitute(
      \ &commentstring, '^$', '%s', ''), '\S\zs%s',' %s', '') ,'%s\ze\S', '%s ', '')), '%s', 1)
    if r == ""
      let r = l
    en
  " Chars and Text
    try
      let l:line_char = a:1
    cat
      let l:line_char = " "
    endt
    let l:line_text = " " . toupper(substitute(substitute(
          \getline('.'), ".*" . l, "", ""), r, "", "")) . " "
    let l:line_len = ((80 - strlen(l:line_text)) / 2) - 2
    if l:line_len < 6
      echom "This line is too long to add a title to."
    el
    " Make oddly numbered lines even
      let l:fill_char = ""
      if strlen(l:line_text) % 2 == 1
        let l:fill_char = l:line_char
      en
    " Create the Line Parts
      let l:i = 1
      wh l:i < l:line_len
        let l:i += 1
        let l:line_char = l:line_char . l:line_char[0]
      endw
    " Insert the Line and Text
      call setline(line("."), substitute(getline('.'),
            \ getline('.'), l . " ". l:line_char . l:line_text .
            \ l:line_char . l:fill_char . " " . r, "g"))
    en
endfun
" Function only accepts single chars
nn comm  :call <SID>CenterComment(" ")<cr>
nn comm- :call <SID>CenterComment("-")<cr>
nn comm~ :call <SID>CenterComment("~")<cr>
nn comm@ :call <SID>CenterComment("@")<cr>
nn comm! :call <SID>CenterComment("!")<cr>
nn comm* :call <SID>CenterComment("*")<cr>

nn <leader>c- :CenterComment -<cr>

" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ABBREVIATIONS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "
iab @@ hello@julianorchard.co.uk
iab ~~ Julian Orchard <hello@julianorchard.co.uk>
let gcfg = "git config "
iab <expr> ~g substitute(system(gcfg . 'user.name') . " <" . system(gcfg . 'user.email') . ">", '\n', '', 'g')
