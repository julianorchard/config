#+OPTIONS: broken-links:mark
#+author: Julian Orchard <hello@julianorchard.co.uk>
#+title: My Arch Linux Configuration (btw)
#+description: I use Arch Linux, btw. Nowhere near as much as I'd like, but this is my configuration (literately written, using Emacs Org Mode).

#+begin_quote
I use arch linux, btw.
#+end_quote

Very occasionally, and only on my ThinkPad x220, sadly.

I'd love to use Arch more, to be honest, as it's a lovely experience, but I don't use it so often these days. 

As a result, I've recently made it a mission to try and just get something simple, reproducable, and consistent going on. I'm using default =i3=, as a result (I've used a wide variety of similar window managers).

** Content                                                      :toc:quote:noexport:
#+BEGIN_QUOTE
  - [[#zshell][Zshell]]
  - [[#x11][X11]]
  - [[#terminal][Terminal]]
  - [[#window-manager][Window Manager]]
  - [[#zathura][Zathura]]
  - [[#lsd][LSD]]
#+END_QUOTE

** Zshell

I switched from a =.bashrc= to =.zshrc= too late, I think. I didn't know how good it was!

One of the first things I ever did when I hopped into a terminal emulator for the first time was =chsh=... which was, in hindsight, a mistake. By doing this I overcomplicated things; I initially used [[https://github.com/fish-shell/fish-shell][Fish]] (which I've heard great things about) which was quite far away from the stock shell experience I should have probably been getting used to.

So when I switched back to =.bashrc=, I got in the mindset that Bash is enough, and it definitely is for most things I do, to be honest. But eventually I got seduced once again by the slightly more fully featured shell, and this time I knew enough to do what I wanted with it.

Firstly, we start by trying to accomplish the eternal task of cleaning the home directory:

#+begin_src sh :tangle ~/.zshrc :mkdirp yes

  # Bundler, Ruby
  export BUNDLE_USER_CONFIG="$XDG_CONFIG_HOME"/bundle
  export BUNDLE_USER_CACHE="$XDG_CACHE_HOME"/bundle
  export BUNDLE_USER_PLUGIN="$XDG_DATA_HOME"/bundle
  # GPG
  export GNUPGHOME="$XDG_CONFIG_HOME"/gnupg
  # Less
  export LESSHISTFILE="$XDG_CACHE_HOME"/less/history
  export LESSKEY="$XDG_CONFIG_HOME"/less/lesskey
  # Not Much
  export NMBGIT="$XDG_DATA_HOME"/notmuch/nmbug⎋k
  export NOTMUCH_CONFIG="$XDG_CONFIG_HOME"/notmuch/notmuchrc
  # Node/NPM
  export NODE_PATH="$NPM_PACKAGES"/lib/node_modules:"$NODE_PATH"
  export NODE_REPL_HISTORY="$XDG_DATA_HOME"/node_repl_history
  export NPM_PACKAGES="$XDG_CONFIG_HOME"/npm-packages
  export PATH="$NPM_PACKAGES"/bin:"$PATH"
  # GNU Pass
  export PASSWORD_STORE_DIR="$XDG_DATA_HOME"/pass
  # X11
  export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority
  export XINITRC="$XDG_CONFIG_HOME"/X11/xinitrc 
  # HISTFILE
  HISTFILE=~/.cache/zsh/zsh_histfile
  # ZDOTDIR (not sure if this changes the HISTFILE, 
  # so setting it for zcompdump anyway)
  ZDOTDIR=~/.cache/zsh/

#+end_src

A lot of this file is, in fact, dedicated to trying to clean the home dir. I mostly use [[https://wiki.archlinux.org/title/XDG_Base_Directory][this lifesaving Arch wiki page]] for help.

Next, some more Zsh setup (from the wizard):

#+begin_src sh :tangle ~/.zshrc :mkdirp yes

  HISTSIZE=1000
  SAVEHIST=2000
  # AutoCD (cd without cd) and 
  # Notify of background processes
  setopt autocd notify
  bindkey -e
  zstyle :compinstall filename '/home/ju/.zshrc'
  autoload -Uz compinit
  compinit

#+end_src

We style the prompt:

#+begin_src sh :tangle ~/.zshrc :mkdirp yes
  PROMPT=" △  %1~  "
 #+end_src

We set some lang/locale stuff:

#+begin_src sh :tangle ~/.zshrc :mkdirp yes

  export LANG=en_GB.UTF8
  export LANGUAGE=en_GB.UTF8
  export LC_CTYPE=en_GB.UTF8

 #+end_src

And we set some default applications to use:

- Browser - Firefox
- Editor - Vim, or Nvim
- Filemanager - Ranger
- Terminal - Kitty

#+begin_src sh :tangle ~/.zshrc :mkdirp yes

  export BROWSER="firefox"
  [ -x /usr/bin/nvim ] && export EDITOR="nvim" || export EDITOR="vim"
  export FILE="ranger"
  export TERMINAL="kitty"

 #+end_src

 Next, we set up some aliases that I commonly use. I've written a bit about them below:

 | Alias   | Purpose                                                | Requirement     |
 |---------+--------------------------------------------------------+-----------------|
 | =cls=     | Clears the terminal                                    | Using CMD often |
 | =md=      | Make directory and create any we need to along the way |                 |
 | =cat=     | Replace =cat= command with =bat=                           | [[https://github.com/sharkdp/bat][sharkdp/bat]]     |
 | =la= / =ls= | Replace some =ls -la= commands with LSD                  | [[https://github.com/Peltoche/lsd][Peltoche/lsd]]    |

#+begin_src sh :tangle ~/.zshrc :mkdirp yes

  alias cls='clear'
  alias free="free -h"
  alias md="mkdir -p"
  alias xc="xclip -sel c <"
  alias site='cd /srv/http/'
  alias home='cd ${HOME}'
  [ -x /usr/bin/bat ] && alias cat="bat" 
  [ -x /usr/bin/hue ] && alias lights='hue lights'
  [ -x /usr/bin/kitty ] && alias iv="kitty +kitten icat"
  if [ -x /usr/bin/lsd ] ; then
      alias la="lsd -la"
      alias ll="lsd -l"
      alias ls="lsd"
  else
      alias la="ls -la"
      alias ll="ls -l"
      alias ls="ls --color=tty"
  fi
  [ -x /usr/bin/neomutt ] && alias mutt='neomutt'
  [ -x /usr/bin/nvim ] && alias vim='nvim'
  [ -x /usr/bin/protonvpn ] && alias vpn="protonvpn"  
  [ -x /usr/bin/ranger ] && alias r="ranger"
  [ -x /usr/bin/sxiv ] && [ -z "${HOME}/.bin/sxiv.sh" ] && alias sxiv="${HOME}/.bin/sxiv.sh"
  [ -x /usr/bin/zathura ] && [ -z "${HOME}/.bin/zath.sh" ] && alias z="${HOME}/.bin/zath.sh"

#+end_src

Finally, we set *possibly* the only path I'll need; =~/.local/bin=. Then we start the X11 enrivonment, the =.xinitrc= of which we'll explore in the next bit (it's small)!

#+begin_src sh :tangle ~/.zshrc :mkdirp yes
  export PATH=${PATH}:${HOME}/.local/bin/
  systemctl -q is-active graphical.target && [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx ${HOME}/.config/X11/xinitrc
#+end_src

** X11

Some files for x11 include xinitrc, and that's it, for me. 

#+begin_src sh :tangle ~/.config/X11/xinitrc :mkdirp yes
  #!/bin/sh

  # userresources=$HOME/.config/X11/Xresources
  # usermodmap=$HOME/.config/X11/Xmodmap
  # sysresources=/etc/X11/xinit/Xresources
  # sysmodmap=/etc/X11/xinit/.Xmodmap

  # Systemctl Fix
  #systemctl --user set-environment DISPLAY=:0
#+end_src

[[https://youtu.be/XkCBhKs4faI?t=17][These days...]]

#+begin_src sh :tangle ~/.config/X11/xinitrc :mkdirp yes
  setxkbmap -layout gb
#+end_src

Basically, we're just pointing [[https://en.wikipedia.org/wiki/Xrdb][xrdb]] at the [[https://en.wikipedia.org/wiki/X_resources][Xresources]] file, in =~/.config/X11/Xresources=:

#+begin_src sh :tangle ~/.config/X11/xinitrc :mkdirp yes
  xrdb -merge "$HOME"/.config/X11/Xresources
#+end_src

This part is from the default =xinitrc= file. I believe it just starts programs in =xinitrc.d=:

#+begin_src sh :tangle ~/.config/X11/xinitrc :mkdirp yes

  # if [ -d /etc/X11/xinit/xinitrc.d ]
  # then
  #   for f in /etc/X11/xinit/xinitrc.d/?*.sh
  #   do
  #     # If $f executable, execute
  #     [ -x "$f" ] && . "$f"
  #   done
  #   unset f
  # fi

#+end_src

Meanwhile, I want to start some programs of my own! Including the essential [[https://github.com/coldfix/udiskie][udiskie]]! I then exec my window manager of choice.

#+begin_src sh :tangle ~/.config/X11/xinitrc :mkdirp yes
  # [ -x /usr/bin/udiskie ] && exec udiskie

  # exec awesome
  # exec bspwm
  exec i3
#+end_src

I've stopped using Awesome since discovering Emacs and wanting to focus on an less overwhelmingly fully featured window manager.

Right, but that's not the end. Here's my /MESS/ of an Xresources file. It needs some serious spring cleaning. These four are apparently from [[https://github.com/dylanaraps/pywal][wal]]: 

#+begin_src sh :tangle ~/.config/X11/Xresources :mkdirp yes
  ,*foreground: #f1e0d1
  ,*background: #141e27
  ,*.foreground: #f1e0d1
  ,*.background: #141e27
#+end_src

But only that bit...? Not sure. This is apparently for a [[https://wiki.archlinux.org/title/rxvt-unicode][terminal emulator I no longer use]], [[https://github.com/muennich/sxiv][an image viewer that's no longer maintained]], and [[https://github.com/davatorium/rofi][rofi]]...

#+begin_src sh :tangle ~/.config/X11/Xresources :mkdirp yes
  ! Terminal
  URxvt*foreground: #f1e0d1
  !URxvt*background: [100]#141e27
  URxvt*background: [100]#949494
  URxvt*cursorColor: #f1e0d1
  URxvt*borderColor: [100]#141e27
  ! Term Language Support
  URxvt.inputMethod: ibus
  URxvt.preeditType: OverTheSpot
  ! Set depth to make transparency work.
  URxvt*depth: 32
  ! Sxiv
  Sxiv.foreground: #f1e9d1
  Sxiv.background: #141e27
  Sxiv.font: Roboto-Mono:size=9
  ! Rofi
  rofi.font: RobotoMono-Light 8
#+end_src

Now, a long list of the system colours:

#+begin_src sh :tangle ~/.config/X11/Xresources :mkdirp yes
  ! Colors 0-15.
  ! special
  ,*.foreground:   #c5c8c6
  ,*.background:   #1d1f21
  ,*.cursorColor:  #c5c8c6
  ! black
  ,*.color0:       #282a2e
  ,*.color8:       #373b41
  ! red
  ,*.color1:       #a54242
  ,*.color9:       #cc6666
  ! green
  ,*.color2:       #8c9440
  ,*.color10:      #b5bd68
  ! yellow
  ,*.color3:       #de935f
  ,*.color11:      #f0c674
  ! blue
  ,*.color4:       #5f819d
  ,*.color12:      #81a2be
  ! magenta
  ,*.color5:       #85678f
  ,*.color13:      #b294bb
  ! cyan
  ,*.color6:       #5e8d87
  ,*.color14:      #8abeb7
  ! white
  ,*.color7:       #707880
  ,*.color15:      #c5c8c6
#+end_src

Now, for more colours, for xterm and Urxvt:

#+begin_src sh :tangle ~/.config/X11/Xresources :mkdirp yes
  ! Atom One Light theme
  xterm*background: #f9f9f9
  xterm*foreground: #383a42
  xterm*cursorColor: #d0d0d0
  xterm*color0: #000000
  xterm*color1: #E45649
  xterm*color2: #50A14F
  xterm*color3: #986801
  xterm*color4: #4078F2
  xterm*color5: #A626A4
  xterm*color6: #0184BC
  xterm*color7: #A0A1A7
  xterm*color8: #5c6370
  xterm*color9: #e06c75
  xterm*color10: #50A14F
  xterm*color11: #986801
  xterm*color12: #4078F2
  xterm*color13: #A626A4
  xterm*color14: #0184BC
  xterm*color15: #ffffff
  ! Atom One Light theme
  urxvt*background: #f9f9f9
  urxvt*foreground: #383a42
  urxvt*cursorColor: #d0d0d0
  urxvt*color0: #000000
  urxvt*color1: #E45649
  urxvt*color2: #50A14F
  urxvt*color3: #986801
  urxvt*color4: #4078F2
  urxvt*color5: #A626A4
  urxvt*color6: #0184BC
  urxvt*color7: #A0A1A7
  urxvt*color8: #5c6370
  urxvt*color9: #e06c75
  urxvt*color10: #50A14F
  urxvt*color11: #986801
  urxvt*color12: #4078F2
  urxvt*color13: #A626A4
  urxvt*color14: #0184BC
  urxvt*color15: #ffffff
#+end_src

Not the best.

** Terminal

I used urxvt for a very long time, but I now use Kitty, and it's brilliant.

The things I want in a terminal include being fast, the ability to have padding, and ligature/extensive character support, and Kitty does those things for me.

Setting the fonts:

#+begin_src sh :tangle ~/.config/kitty/kitty.conf :mkdirp yes
    font_family                     monospace
    bold_font                       auto
    italic_font                     auto
    bold_italic_font                auto
    font_size                       10.0
#+end_src

Sorting the cursor (although I think I was having trouble getting this working outside of NeoVim...): 

#+begin_src sh :tangle ~/.config/kitty/kitty.conf :mkdirp yes
    cursor_shape                    underline
    cursor_underline_thickness      3.0
    cursor                          #FF0000
    cursor_text_color               #00FFFF
#+end_src

Want to experiment with this more, but here I'm adjusting the line height and column width. I assume this could cause issues with certain characters lining up properly, but I've not tested it extensively enough yet:

#+begin_src sh :tangle ~/.config/kitty/kitty.conf :mkdirp yes
    adjust_line_height              120%
    adjust_column_width             110%
#+end_src

Get rid of audio bell, add a tiny visual one:

#+begin_src sh :tangle ~/.config/kitty/kitty.conf :mkdirp yes
    enable_audio_bell               False
    visual_bell_duration            0.1
#+end_src

Sweet, sweet aesthetics:

#+begin_src sh :tangle ~/.config/kitty/kitty.conf :mkdirp yes
    window_margin_width             10
    background_opacity 0.8
#+end_src

=Alt + Backspace= to delete words is important for me:

#+begin_src sh :tangle ~/.config/kitty/kitty.conf :mkdirp yes
    map alt+backspace send_text all \x17
    map super+backspace send_text all \x15
#+end_src

That's it for Kitty. 
** Window Manager

I'm using =i3=, because it /just works/. It's actually amazing how quickly I've got this working compared to using my previous window managers. I guess there's a reason it's one of the most popular choices...

*** Basic Config

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

set $mod Mod4
font pango:file-icons:Fira Code:monospace 10
exec --no-startup-id dex --autostart --environment i3
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork
exec --no-startup-id nm-applet
for_window [class="^.*"] border pixel 0

#+end_src

Setting the wallpaper with =nitrogen=.

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

# Wallpapers
exec nitrogen --set-auto ~/Images/senjougahara.jpg

#+end_src

Use Dunst for notifications.

#+begin_src  i3 :tangle ~/.config/i3/config :mkdirp yes

# Notification Daemon
exec_always --no-startup-id dunst -config ~/.config/dunst/dunstrc

#+end_src

Audio bindings and some other basic stuff.

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status
floating_modifier $mod

#+end_src

*** Bindings

Some basic movement keybindings and some normal bindings. I need to change lots of this still, but I plan on keeping it pretty simple. 

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

bindsym $mod+Return exec i3-sensible-terminal
bindsym $mod+q kill
bindsym $mod+d exec dmenu_run -nb '#1e1e1e' -sf '#1e1e1e' -sb '#F4800D' -nf '#F4800D' -b
bindsym $mod+f exec firefox
bindsym $mod+e exec emacs
bindsym $mod+semicolon exec i3lock-fancy

bindsym $mod+h focus left
bindsym $mod+k focus down
bindsym $mod+j focus up
bindsym $mod+l focus right
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up

bindsym $mod+Right focus right
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+semicolon move right
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right
# bindsym $mod+h split h
# bindsym $mod+v split v
# bindsym $mod+f fullscreen toggle
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
# bindsym $mod+e layout toggle split
bindsym $mod+Shift+space floating toggle
bindsym $mod+space focus mode_toggle
bindsym $mod+a focus parent

#+end_src

*** Workstations

This sets the workspace names, and then binds some basic workstation bindings to them for movement between and movement of windows between workstations.

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes


set $ws1 "1:"
set $ws2 "2:"
set $ws3 "3:"
set $ws4 "4:Four"
set $ws5 "5:Five"
set $ws6 "6:Six"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9:"
set $ws10 "10"

bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10

#+end_src

Reloading, restarting, and exiting X sessions!

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

bindsym $mod+Shift+c reload
bindsym $mod+Shift+r restart
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

#+end_src

Set some default workspaces for certain applications. I never really made use of this feature using i3 or other window managers before, but I want to be really strict with it with this config. 

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

assign [class="Emacs"] $ws1
assign [class="Firefox"] $ws2
assign [class="kitty"] $ws3

assign [class="Spotify"] $ws9
assign [class="Signal"] $ws9

#+end_src

*** Resize

Not that I use it much, but this is /resize mode/.

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

mode "resize" {
  bindsym j resize shrink width 10 px or 10 ppt
  bindsym k resize grow height 10 px or 10 ppt
  bindsym l resize shrink height 10 px or 10 ppt
  bindsym semicolon resize grow width 10 px or 10 ppt
  # same bindings, but for the arrow keys
  bindsym Left resize shrink width 10 px or 10 ppt
  bindsym Down resize grow height 10 px or 10 ppt
  bindsym Up resize shrink height 10 px or 10 ppt
  bindsym Right resize grow width 10 px or 10 ppt
  # back to normal: Enter or Escape or $mod+r
  bindsym Return mode "default"
  bindsym Escape mode "default"
  bindsym $mod+r mode "default"
}

bindsym $mod+r mode "resize"

#+end_src

*** Bar

=i3status= is the bar used by i3wm. It's minimal but good for what I want (don't really want much interactivity, just basic stats and stuff). This is definitely not finished, however. 

#+begin_src i3 :tangle ~/.config/i3/config :mkdirp yes

bar {
  separator_symbol " "
  strip_workspace_numbers yes
  status_command i3blocks
  font pango:file-icons-10 10
  colors {
    background #1E1E1E
    statusline #F4800D
  }
}

#+end_src

*** i3blocks

As far as I'm aware, the functionality of the build in i3bar is /fairly/ limiated. It's therefore a nice idea to have something a little more robust to be able to use. That's why I've gone for i3blocks. I used it ages ago and remember quite enjoying it, so I'll try and get something nicely working again...

**** Syncthing status

=ps ax= gets running processes, =grep -v= excludes the command itself from registering as a running process, then we =wc= (word count) the output of the command =grep "syncthing"=. If that's nothing, Syncthing isn't running... it's not /likely/ to be running:

#+begin_src ini :tangle ~/.config/i3blocks/config :mkdirp yes
[syncthing]
command=[ $(ps ax | grep -v "grep syncthing" | grep "syncthing" | wc -c) -ne 0 ] && echo "" || echo ""
interval=60
#+end_src

**** Internet Connection

Ping =google.com= and just tell me if that works:

#+begin_src ini :tangle ~/.config/i3blocks/config :mkdirp yes
[internet]
command=ping -q -c1 google.com &>/dev/null && echo "" || echo ""
interval=5
#+end_src

**** Battery percentage

This requires changing the permissions of the capacity file:

#+begin_src ini :tangle ~/.config/i3blocks/config :mkdirp yes
[battery]
command=echo " $(cat /sys/class/power_supply/BAT0/capacity)%"
interval=5
#+end_src

**** Time

#+begin_src ini :tangle ~/.config/i3blocks/config :mkdirp yes
[time]
command=echo "$(date '+%H:%M')"
interval=5
#+end_src

**** Empty

#+begin_src ini :tangle ~/.config/i3blocks/config :mkdirp yes
[time]
command=echo " "
interval=once
#+end_src

** Zathura

A very nice little PDF viewer, with a nice little config, here:

#+begin_src sh :tangle ~/.config/zathura/zathurarc :mkdirp yes
# Setting:
set statusbar-h-padding 0
set statusbar-v-padding 0
set page-padding 1
# Colouring:
set default-bg      "#FF0000"
set default-fg      "#00FFFF"
set statusbar-bg    "#00FFFF"
set statusbar-fg    "#000000"
# Mapping:
map i recolor
#+end_src

I've had this same configuration since I basically started using Arch, and although it doesn't match a lot of other stuff I'm using now, I need to keep it.

** LSD

A little LSD config:

#+begin_src yaml :tangle ~/.config/lsd/config.yaml
  blocks:
    - permission
    - user
    - group
    - size
    - date
    - name
  color:
    when: auto
    theme: default
  date: '+%d %b %X'
  icons:
    when: auto
    theme: fancy
    separator: "  "
#+end_src

