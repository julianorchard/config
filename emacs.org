#+author: Julian Orchard <git@julianorchard.co.uk>
#+title: /emacs.org/

I'm still learning all about Emacs, and I probably always will be. So these are my current settings, semi-documented, semi-copied from other configurations, fully-useful to me at the moment. 

** Content                                                     :toc_3:quote:
#+BEGIN_QUOTE
  - [[#meta][Meta]]
  - [[#improve-start-up-time][Improve Start-Up Time]]
  - [[#the-basics][The Basics]]
    - [[#scratch-buffer-and-startup-info][Scratch Buffer and Startup Info]]
    - [[#my-details][My Details]]
    - [[#escape-actually-escapes][Escape Actually Escapes]]
    - [[#mouse][Mouse]]
    - [[#parenthesis-mode][Parenthesis Mode]]
    - [[#minimizing-lockfiles-and-tempfiles][Minimizing Lockfiles and Tempfiles]]
    - [[#utf-8][UTF-8]]
    - [[#dialogue-boxes][Dialogue Boxes]]
    - [[#yesno-or-yn][Yes/No, or Y/N]]
    - [[#load-path][Load Path]]
  - [[#package-setup][Package Setup]]
  - [[#aesthetics][Aesthetics]]
  - [[#completion][Completion]]
    - [[#ivy-completion][Ivy Completion]]
    - [[#company][Company]]
  - [[#evil][Evil]]
    - [[#the-evil-mode][The Evil Mode]]
    - [[#the-evil-collection][The Evil Collection]]
    - [[#evil-commentary][Evil Commentary]]
    - [[#notes][Notes]]
  - [[#org][Org]]
    - [[#about][About]]
    - [[#font-setup][Font Setup]]
    - [[#main-org][Main Org]]
    - [[#ligatures][Ligatures]]
    - [[#some-org-setup][Some Org Setup]]
    - [[#visual-column-mode][Visual Column Mode]]
    - [[#org-bullets][Org Bullets]]
    - [[#evil-org][Evil Org]]
    - [[#org-prettier-tables][Org Prettier Tables]]
    - [[#org-tempo][Org Tempo]]
    - [[#tables-of-content][Tables Of Content]]
  - [[#helpful][Helpful]]
  - [[#todo][Todo]]
#+END_QUOTE

** Meta

This isn't just another one of my config files, it's the config files to manage all others.

I'm going to try and implement something similar to the [[https://github.com/daviwil/dotcrafter.el][dotcrafter.el]] example package by David Wilson.

#+begin_src elisp
  (defun org-babel-tangle-config ()
    (when (or (string-equal (buffer-file-name)
                            (expand-file-name "~/config/tester.org"))
              (string-equal (buffer-file-name)
                            (expand-file-name "~/config/test2.org")))
              (let ((org-config-babel-evaluate nil))
                (org-babel-tangle))))

    (add-hook 'org-mode-hook
              (lambda ()
                (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

** Improve Start-Up Time

This! What is /this/?

#+begin_src elisp :tangle ~/.emacs.d/init.el
;;;; -*- lexical-binding: t; -*- 
#+end_src

Delay garbage collection.

=most-positive-fixnum= is an elegant way of avoiding just having a large number there, like I've seen a lot when looking at this. 

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq gc-cons-percentage 0.6)
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

** The Basics

Including a few nice bindings that I can't live without, and my name and stuff: 

*** Scratch Buffer and Startup Info

This adds a message like:

#+begin_src elisp
;; Emacs loaded in X.XXXX seconds, just for you to waste time reading this in the scratch buffer
#+end_src

It's quite simple:

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq inhibit-startup-message t)
  (setq initial-scratch-message (concat ";;  Emacs loaded in " (emacs-init-time) ", just for you to waste time reading this in the scratch buffer"))
#+end_src

*** My Details

Added because it's sometimes nice to have these around (although I've not really needed them here in my Emacs journey, thus far...).

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq user-full-name "Julian Orchard")
  (setq user-mail-address "hello@julianorchard.co.uk")
#+end_src

*** Escape Actually Escapes

One of the most initially frustrating things about Emacs was escaping the minibuffer for any reason would yeild terrible results.

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Mouse

Scrolling amount. 

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) 
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-follow-mouse 't)
  (setq scroll-step 1)
#+end_src

*** Parenthesis Mode

Spending any longer than 5 seconds in a buffer of lisp will require this, and it's nice to have generally: 

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (show-paren-mode t)
#+end_src

*** Minimizing Lockfiles and Tempfiles

One of the wost things I found about initially using Emacs was how quickly simply opening files cluttered up everything. Get rid of the temporary files, as much as possible. Backup files to =~/Documents/Emacs-backup-dir/= too, out of the way as much as is reasonable...

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq backup-directory-alist '(("~/Documents/Emacs-backup-dir/")))
  (setq create-lockfiles nil)
#+end_src

*** UTF-8

Yes, thank you.

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+end_src

*** Dialogue Boxes

No, thank you.

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq use-dialog-box nil)
#+end_src

*** Yes/No, or Y/N

Y/N, thank you.

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Load Path

Paths to load, for Elisp by me or others.

|-------------------------+------------------------------------------------------------|
| Path                    | Purpose                                                    |
|-------------------------+------------------------------------------------------------|
| =~/.emacs.d/lisp/=      | Custom stuff, eventually, everything will be split up here |
| =~/.emacs.d/site-lisp/= | Non-MELPA / ELPA Packages, cloned from Github or E-wiki    |
|-------------------------+------------------------------------------------------------|

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (add-to-list 'load-path
               (concat (getenv "HOMEPATH") "/.emacs.d/lisp/"))
#+end_src

** Package Setup

Now *THIS* needs review. Is this the right place for it, and is this good /stuff at all/? I don't know, at the moment, so I need to find out...

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  (custom-set-variables
   '(line-number-mode nil)
   '(org-agenda-files '("~/OneDrive/org/weekly.org"))
   '(package-selected-packages
     '(org-pretty-table yasnippet-snippets company elcord 2048-game web-mode solaire-mode php-mode evil-org linum-off evil-leader visual-fill-column yasnippet ahk-mode magit org-bullets evil-commentary evil-collection helpful doom-modeline all-the-icons doom-themes ivy no-littering command-log-mode use-package evil))
   '(show-paren-mode t))
  (custom-set-faces)
#+end_src

** Aesthetics

Generally, this bit is about the looks of Emacs; the /whole/ look and feel is spread around the configuration a fair bit (especially concerning org-mode), but this is a lot of the inital, most important setup (thank you again, Doom Emacs).

But first, get rid of the more useless stuff, and mess with the line-numbers (needs work):

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 5)
  (menu-bar-mode -1)
  (column-number-mode)
  (setq display-line-numbers 'relative)
  (dolist (rm-ln-hook '(org-mode-hook
                        term-mode-hook
                        shell-mode-hook
                        treemacs-mode-hook
                        eshell-mode-hook))
    (add-hook rm-ln-hook (lambda () (display-line-numbers-mode))))
  (setq visible-bell t)
#+end_src

I use [[https://github.com/edwardtufte/et-book][ETBookOT]] as my Serif font of choice, and [[https://github.com/tonsky/FiraCode][Fira Code]] for the codes: 

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 110)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 110)
  (set-face-attribute 'variable-pitch nil :font "ETBookOT" :height 160 :weight 'regular)
  (set-face-attribute 'header-line nil :font "Fira Code Retina" :height 300)
  (use-package doom-themes
    :init (load-theme 'doom-tomorrow-night t))
  (use-package all-the-icons
    :ensure t)
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 20)))
  (use-package solaire-mode
    :init (solaire-global-mode +1))
#+end_src

** Completion

*** Ivy Completion

Completion in the minibuffer.

#+begin_src elisp :tangle ~/.emacs.d/init.el
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)	
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))
    (global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
#+end_src

*** Company

For completion /outside/ the minibuffer.

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (use-package company
    :custom
    (company-global-modes '(not shell-mode eaf-mode))
    :config
    (global-company-mode 1))
#+end_src

** Evil

Evil allows vim users (like me) to join the church of Emacs... but we'll always be heretics, to some degree... 

*** The Evil Mode

We go with =use-package= to get Evil mode configured, and installed. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil
    :ensure t
    :demand 
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (define-key evil-normal-state-map (kbd "C-l") 'evil-window-next)
    (define-key evil-normal-state-map (kbd "C-h") 'evil-window-next)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

*** The Evil Collection

The the evil collection! 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Evil Commentary

Like Tim Pope's incredible 'vim commentary', but it's in Emacs!

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+end_src

*** Notes

I'd like to work on my Evil config a lot more, get to know it, and get to know how I should best make bindings using it. I feel like I'm lost with it at the moment, but that's fine! It's a journey...

** Org
*** About

One of the biggest draws to Emacs, for me, has become Org-mode. It's incredible. 

*** Font Setup

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; Set faces for heading levels
    (dolist (face '((org-document-title . 2.0)
                    (org-level-1 . 1.4)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :font "ETBookOT" :weight 'Light :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-quote nil :inherit 'variable-pitch :slant 'italic))

#+end_src

*** Main Org

This is the main org-mode block.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis "     ↓")
    (setq header-line-format " ")
    (setq org-agenda-files
          '("~/OneDrive/org/weekly.org" "~/OneDrive/org/todo.org"))
    (setq org-duration-format (quote h:mm))
    (setq org-todo-keywords
          '((sequence "TODO" "PENDING" "|" "DONE" "CANCELLED")))
    (efs/org-font-setup)

#+end_src

*** Ligatures

I'd like to be able to replace the '#+begin_quote' blocks and code blocks of Org with symbols in the end, and I've not got it working yet. This is mainly a reminder, copied from [[https://github.com/tecosaur/emacs-config][Tecosaur's]] dotfiles. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

    ;; ;; Get this working...
    ;; (appendq! +ligatures-extra-symbols
    ;;           `(:checkbox      "☐"
    ;; 			     :pending       "◼"
    ;; 			     :checkedbox    "☑"
    ;; 			     :list_property "∷"
    ;; 			     :em_dash       "—"
    ;; 			     :ellipses      "…"
    ;; 			     :arrow_right   "→"
    ;; 			     :arrow_left    "←"
    ;; 			     :title         "𝙏"
    ;; 			     :subtitle      "𝙩"
    ;; 			     :author        "𝘼"
    ;; 			     :date          "𝘿"
    ;; 			     :property      "☸"
    ;; 			     :options       "⌥"
    ;; 			     :startup       "⏻"
    ;; 			     :macro         "𝓜"
    ;; 			     :html_head     "🅷"
    ;; 			     :html          "🅗"
    ;; 			     :latex_class   "🄻"
    ;; 			     :latex_header  "🅻"
    ;; 			     :beamer_header "🅑"
    ;; 			     :latex         "🅛"
    ;; 			     :attr_latex    "🄛"
    ;; 			     :attr_html     "🄗"
    ;; 			     :attr_org      "⒪"
    ;; 			     :begin_quote   "❝"
    ;; 			     :end_quote     "❞"
    ;; 			     :caption       "☰"
    ;; 			     :header        "›"
    ;; 			     :results       "🠶"
    ;; 			     :begin_export  "⏩"
    ;; 			     :end_export    "⏪"
    ;; 			     :properties    "⚙"
    ;; 			     :end           "∎"
    ;; 			     :priority_a   ,(propertize "⚑" 'face 'all-the-icons-red)
    ;; 			     :priority_b   ,(propertize "⬆" 'face 'all-the-icons-orange)
    ;; 			     :priority_c   ,(propertize "■" 'face 'all-the-icons-yellow)
    ;; 			     :priority_d   ,(propertize "⬇" 'face 'all-the-icons-green)
    ;; 			     :priority_e   ,(propertize "❓" 'face 'all-the-icons-blue)))
    ;; (set-ligatures! 'org-mode
    ;; 		  :merge t
    ;; 		  :checkbox      "[ ]"
    ;; 		  :pending       "[-]"
    ;; 		  :checkedbox    "[X]"
    ;; 		  :list_property "::"
    ;; 		  :em_dash       "---"
    ;; 		  :ellipsis      "..."
    ;; 		  :arrow_right   "->"
    ;; 		  :arrow_left    "<-"
    ;; 		  :title         "#+title:"
    ;; 		  :subtitle      "#+subtitle:"
    ;; 		  :author        "#+author:"
    ;; 		  :date          "#+date:"
    ;; 		  :property      "#+property:"
    ;; 		  :options       "#+options:"
    ;; 		  :startup       "#+startup:"
    ;; 		  :macro         "#+macro:"
    ;; 		  :html_head     "#+html_head:"
    ;; 		  :html          "#+html:"
    ;; 		  :latex_class   "#+latex_class:"
    ;; 		  :latex_header  "#+latex_header:"
    ;; 		  :beamer_header "#+beamer_header:"
    ;; 		  :latex         "#+latex:"
    ;; 		  :attr_latex    "#+attr_latex:"
    ;; 		  :attr_html     "#+attr_html:"
    ;; 		  :attr_org      "#+attr_org:"
    ;; 		  :begin_quote   "#+begin_quote"
    ;; 		  :end_quote     "#+end_quote"
    ;; 		  :caption       "#+caption:"
    ;; 		  :header        "#+header:"
    ;; 		  :begin_export  "#+begin_export"
    ;; 		  :end_export    "#+end_export"
    ;; 		  :results       "#+RESULTS:"
    ;; 		  :property      ":PROPERTIES:"
    ;; 		  :end           ":END:"
    ;; 		  :priority_a    "[#A]"
    ;; 		  :priority_b    "[#B]"
    ;; 		  :priority_c    "[#C]"
    ;; 		  :priority_d    "[#D]"
    ;; 		  :priority_e    "[#E]")
    ;; (plist-put +ligatures-extra-symbols :name "⁍")
    )
 #+end_src

*** Some Org Setup

Some random bits

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
 (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (line-spacing 9))
 #+end_src

*** Visual Column Mode

Centre it.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
 (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))
 #+end_src

*** Org Bullets

Better bullet points and indentation.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
    (org-bullets-bullet-list '("\u200b" " " "◉" "-")))
 #+end_src

*** Evil Org

Hmm... should this be in Evil, or Org subsection...

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  ;; How to make org-templates without the 'capture' part
  ;; Would be to a file with the name of the Monday of the given week. 
  (setq org-capture-templates
        '(("t" "Todo / Journal")
          ("tt" "To Sort" entry (file+olp "~/OneDrive/org/todo.org" "Todo")
           "* TODO %?\n  %U\n %a\n %i")
          ("j" "Journal" entry (file+datetree "~/OneDrive/org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
  ;; Org-Pretty-Table-Mode
 #+end_src

*** Org Prettier Tables

Prettier Org tables, please (they're lovely by default, but this makes them even nicer.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (progn
    (add-to-list 'load-path "~/.emacs.d/site-lisp")
    (require 'org-pretty-table)
    (add-hook 'org-mode-hook (lambda () (org-pretty-table-mode))))
  ;; Org-Tempo
 #+end_src

*** Org Tempo

This allows you to use =<s= to quickly insert a block of script, or =<q= to quickly insert a quote.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (require 'org-tempo)
  ;; Org Padding
  ;;(require 'org-padding)
  (add-hook 'org-mode-hook
            (lambda ()
              (push '("[ ]" . "o" ) prettify-symbols-alist)
              (push '("[X]" . "x" ) prettify-symbols-alist)
              (push '("[-]" . "~" ) prettify-symbols-alist)
              (prettify-symbols-mode)))
#+end_src

*** Tables Of Content

This is a really nice plugin (that I mainly use for /this very project/) that generates a nice table of contents on the saving of the document. The following is /basically/ taken from the [[https://github.com/snosov1/toc-org][repo]], but it works so I'm happy (and I don't want/need to use it with Markdown).

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

** Helpful

This is a todo, really. Taken from Daviwils dotfiles.

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
  #+end_src

** Todo

This needs annotation/better formatting/reviewing:

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; Magit
  (use-package magit
    :ensure t
    :defer 5
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; YAS
  (use-package yasnippet
    :custom
    (setq yas-snippet-dirs)
    :init
    (use-package yasnippet-snippets :after yasnippet))

  ;; Ruby
  (add-to-list 'auto-mode-alist
               '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist
               '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . ruby-mode))

  ;; Web Mode
  (use-package web-mode
    :mode
    (("\\.tpl\\.php\\'" . web-mode)
     ("\\.erb\\'" . web-mode)))

  ;; AutoHotkey
  (use-package ahk-mode
    :config
    (add-to-list 'auto-mode-alist
                 '("\\.ahk" . ahk-mode)))

  ;; Powershell
  (use-package powershell
    :config
    (add-to-list 'auto-mode-alist
                 '("\\.ps1" . powershell)))

                                          ; VBScript
  (setq auto-mode-alist
        (append '(("\\.\\(vbs\\|wsf\\)$" . vbscript-mode))
                auto-mode-alist))

  ;; Connect Remote
  (defun connect-remote ()
    (interactive)
    (dired "/ssh:o@01001010.ml:/home/o/"))
  (setq tramp-default-method "sshx")

  ;; TODO: Check if Discord is installed for this one!
  ;; Discord Emacs 
  ;; (use-package elcord
  ;;   :config
  ;;   (elcord-mode 1))

  ;; XeLaTeX as Default
  (setq latex-run-command "xelatex")

  ;; YAML Mode
  (use-package yaml-mode)

#+end_src

