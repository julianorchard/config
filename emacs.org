#+author: Julian Orchard <git@julianorchard.co.uk>
#+title: /emacs.org/
#+description: My literate emacs configuration, mainly for Windows 10 at the moment. 

This is my on-going project to  /b e c o m e/  an emacs user (from being a vimmer).

** Content                                                     :toc_3:quote:
#+BEGIN_QUOTE
  - [[#the-basics][The Basics]]
    - [[#about][About]]
    - [[#improve-start-up-time][Improve Start-Up Time]]
    - [[#start-in-home-folder][Start in Home Folder]]
    - [[#maximise-window][Maximise Window]]
    - [[#scratch-buffer-and-startup-info][Scratch Buffer and Startup Info]]
    - [[#my-details][My Details]]
    - [[#escape-actually-escapes][Escape Actually Escapes]]
    - [[#mouse][Mouse]]
    - [[#parenthesis-mode][Parenthesis Mode]]
    - [[#minimizing-lockfiles-and-tempfiles][Minimizing Lockfiles and Tempfiles]]
    - [[#utf-8][UTF-8]]
    - [[#dialogue-boxes][Dialogue Boxes]]
    - [[#yesno-or-yn][Yes/No, or Y/N]]
    - [[#load-path][Load Path]]
    - [[#window-splits][Window Splits]]
  - [[#package-setup][Package Setup]]
    - [[#package][Package]]
    - [[#customize][Customize]]
  - [[#aesthetics][Aesthetics]]
    - [[#about-1][About]]
    - [[#remove-pointless-gui][Remove Pointless GUI]]
    - [[#line-numbers-stuff][Line Numbers Stuff]]
    - [[#general-fonts][General Fonts]]
    - [[#themes][Themes]]
  - [[#completion][Completion]]
    - [[#ivy-completion][Ivy Completion]]
    - [[#company][Company]]
  - [[#evil][Evil]]
    - [[#about-2][About]]
    - [[#the-evil-mode][The Evil Mode]]
    - [[#general-keybindings][General Keybindings]]
    - [[#the-evil-collection][The Evil Collection]]
    - [[#the-evil-commentary][The Evil Commentary]]
    - [[#the-evil-surround][The Evil Surround]]
    - [[#undo-fu][Undo-Fu]]
  - [[#avy][Avy]]
    - [[#setup][Setup]]
  - [[#org][Org]]
    - [[#about-3][About]]
    - [[#main-org][Main Org]]
    - [[#org-blog][Org Blog]]
    - [[#font-setup][Font Setup]]
    - [[#prettify-symbols-in-org-mode][Prettify Symbols in Org Mode]]
    - [[#org-setup][Org Setup]]
    - [[#visual-column-mode][Visual Column Mode]]
    - [[#org-bullets][Org Bullets]]
    - [[#evil-org][Evil Org]]
    - [[#org-prettier-tables][Org Prettier Tables]]
    - [[#org-tempo][Org Tempo]]
    - [[#org-tables-of-content][Org Tables Of Content]]
    - [[#super-agenda][Super Agenda]]
  - [[#eshell][Eshell]]
    - [[#about-4][About]]
    - [[#aliases][Aliases]]
    - [[#eshell-prompt-extras][Eshell Prompt Extras]]
  - [[#tramp][Tramp]]
    - [[#about-5][About]]
    - [[#wip][WIP]]
  - [[#helpful][Helpful]]
  - [[#magit][Magit]]
    - [[#about-6][About]]
  - [[#snippets][Snippets]]
    - [[#about-7][About]]
    - [[#yasnippet][Yasnippet]]
    - [[#create-snippets][Create Snippets]]
  - [[#dired][Dired]]
    - [[#subtree][Subtree]]
  - [[#language-modes][Language Modes]]
    - [[#about-8][About]]
    - [[#autohotkey][AutoHotkey]]
    - [[#i3][i3]]
    - [[#latex][LaTeX]]
    - [[#powershell][Powershell]]
    - [[#python][Python]]
    - [[#ruby][Ruby]]
    - [[#spell-checking][Spell Checking]]
    - [[#vbscript][VBScript]]
    - [[#web][Web]]
    - [[#yaml][YAML]]
  - [[#fun][Fun]]
    - [[#discord][Discord]]
#+END_QUOTE

** The Basics
*** About

Including a few nice bindings that I can't live without, and my name and stuff: 

*** Improve Start-Up Time

This! What is /this/?

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
;;;; -*- lexical-binding: t; -*- 
#+end_src

Delay garbage collection.

=most-positive-fixnum= is an elegant way of avoiding just having a large number there, like I've seen a lot when looking at this. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq gc-cons-percentage 0.6)
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

**** TODO Put themeing stuff as high up as possible

*** Start in Home Folder

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (cd (getenv "HOME"))
#+end_src

*** Maximise Window

Upon starting Emacs (on Windows 10, at least), it's annoying that it's not full screen:

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
(add-hook 'emacs-startup-hook 'toggle-frame-maximized)
#+end_src

*** Scratch Buffer and Startup Info

Change the scratch buffer and disable the startup messages.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq inhibit-startup-message t)
  (setq initial-scratch-message (concat ";; Emacs loaded in " (emacs-init-time) ", according to (emacs-init-time), at least...\ 

  "))
#+end_src

I used /Dashboard/ for a short while, but I've decided to make this config as simple as I can.

*** My Details

Added because it's sometimes nice to have these around (although I've not really needed them here in my Emacs journey, thus far...).

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq user-full-name "Julian Orchard")
  (setq user-mail-address "hello@julianorchard.co.uk")
#+end_src

*** Escape Actually Escapes

This is an incredibly useful binding, and one the lack of which /seriously/ threw me when first using emacs.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

**** TODO Use General.el to set this keybind?
<2022-08-12 Fri>

*** Mouse

Set scrolling amount.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) 
  (setq mouse-wheel-progressive-speed nil)
  (setq mouse-wheel-follow-mouse 't)
  (setq scroll-step 1)
#+end_src

*** Parenthesis Mode

Spending any longer than 5 seconds in a buffer of lisp will require this, and it's nice to have generally: 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (show-paren-mode t)
#+end_src

*** Minimizing Lockfiles and Tempfiles

One of the wost things I found about initially using Emacs was how quickly simply opening files cluttered up everything. Get rid of the temporary files, as much as possible. Backup files to =~/Documents/Emacs-backup-dir/= too, out of the way as much as is reasonable...

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq backup-directory-alist `(("." . "~/.cache/emacs/")))
  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 5
        kept-old-versions 5
        version-control t)
  (setq create-lockfiles nil)
#+end_src

*** UTF-8

Yes, thank you.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
#+end_src

*** Dialogue Boxes

No, thank you.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq use-dialog-box nil)
#+end_src

*** Yes/No, or Y/N

Y/N, thank you.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Load Path

Paths to load, for Elisp by me or others.

|-------------------------+------------------------------------------------------------|
| Path                    | Purpose                                                    |
|-------------------------+------------------------------------------------------------|
| =~/.emacs.d/lisp/=      | Custom stuff, eventually, everything will be split up here |
| =~/.emacs.d/site-lisp/= | Non-MELPA / ELPA Packages, cloned from Github or E-wiki    |
|-------------------------+------------------------------------------------------------|

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (add-to-list 'load-path
               (concat (getenv "HOMEPATH") "/.emacs.d/lisp/"))
#+end_src

*** Window Splits

Default the window splits to be horizontal all the time. This is almost always what I want, so it does make sense for me to do it like this

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq split-width-threshold 1 )
#+end_src

** Package Setup
*** Package

So this is basically setting the package-archives Melpa and Elpa.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

This refreshes the package contents, I believe.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (unless package-archive-contents
   (package-refresh-contents))
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))
#+end_src

And now we =require 'use-package=.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

*** Customize

I'm not sure if this really /belongs/ here, but we can move some of the variables set by the =customize= interface to a different file (according to [[https://stackoverflow.com/questions/5052088/what-is-custom-set-variables-and-faces-in-my-emacs][this]], anyway).

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

** Aesthetics
*** About

This part used to be a lot more involved, but I've decided I want to keep things more minimal to actually enjoy /using/ this software more, rather than endlessly making tiny aesthetic changes. I'm therefore planning on using the +stock Emacs themes+, or very similar, and +maybe+ a light and dark version.

*** Remove Pointless GUI

But first, get rid of the more useless GUI stuff.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 5)
  (menu-bar-mode -1)
  (setq visible-bell t)
#+end_src

*** Line Numbers Stuff

I had trouble with this, but use Daviwils dotfiles as a reference in the end (adding the =display-line-numbers-type= to my liking). 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (column-number-mode)

  (setq display-line-numbers-type 'relative)
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  (dolist (rm-ln-hook '(org-mode-hook))
    (add-hook rm-ln-hook (lambda () (display-line-numbers-mode 0))))

#+end_src

*** General Fonts

I used to use ET Book for some really nice looking Org-documents, especially. However, I've stopped this and now just use Fira (I also use a [[version https://github.com/zwaldowski/Fira/tree/zwaldowski/mod-new/otf][fork]] for the /italicised/ version).

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (set-face-attribute 'italic nil :font "Fira Mono" :height 105)
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 110)
#+end_src

I'm not massively attached to this font; I do like it a lot but I don't mind changing it if I decide the fact it doesn't have an italic version officially is a problem. 

*** Themes

    I used to use Doom themes. I am now +planning on+ using the default dark and light themes built into Emacs.

    #+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
    (use-package modus-themes)

    (defun set-dark-theme ()
        (interactive)
        "Sets the dark version of the default theme"
        ;; (set-background-color "black")
        ;; (set-foreground-color "white")
        (load-theme 'modus-vivendi))

    (defun set-light-theme ()
        (interactive)
        "Sets the light version of the default theme"
        ;; (set-background-color "white")
        ;; (set-foreground-color "black")
        (load-theme 'modus-operandi))
    #+end_src

    For switching themes, I wanted to do it automatically if I'm working in the evening... I initially tried something like /this/:

    #+begin_src elisp
    (if (time-less-p (parse-time-string "2022-08-19 23:00:00")
                (current-time))
        ...)
    #+end_src

    The problem was that I was trying to use a full date/time for the comparison, whereas the solution (which sadly, in the end I had to [[https://stackoverflow.com/questions/14760567/emacs-auto-load-color-theme-by-time][look up]]) turned out to be just using /hours/ of the day:

    #+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
    (if (member (string-to-number (substring (current-time-string) 11 13))
                (number-sequence 7 20))
        (set-light-theme)
        (set-dark-theme))
    #+end_src

    Elisp difficult.

    ...

    +=Ctrl+F1= (for /Tomorrow Night/) and =Ctrl+F2= (for /Solarized/) are used to switch between them (found [[https://emacs.stackexchange.com/questions/45799/keyboard-shortcuts-for-applying-a-theme][here]]).+

This /was/ what I used, when using Doom Emacs Themes;

#+begin_src elisp
  (use-package doom-themes
    :init (load-theme 'doom-tomorrow-night t)
    :config
    (global-set-key (kbd "C-<f1>")
                    (lambda () (interactive)
                      (load-theme 'doom-tomorrow-night t)
                      (here/org-font-setup)))
    (global-set-key (kbd "C-<f2>")
                    (lambda () (interactive)
                      (load-theme 'doom-solarized-light t)
                      (here/org-font-setup))))
#+end_src

But I do still want /all-the-icons/, and Doom Modeline is very nice too. We use =display-battery-mode= when we're on my ThinkPad (a.k.a. the only non-remote Linux machine I use), and we use =display-time-mode= for everything.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 20))
    :config
    (display-time-mode 1)
    (if (eq system-type 'gnu/linux)
        (display-battery-mode 1)))
  (use-package solaire-mode
    :init (solaire-global-mode +1))
  (use-package all-the-icons
    :ensure t)
#+end_src

** Completion
*** Ivy Completion

Completion in the minibuffer.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)	
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line))
    :config
    (ivy-mode 1))

#+end_src

**** TODO Make these more Vim-like

Also, the only one that should really be defined here is ='ivy-switch-buffer=, as I guess the ='kill-this-buffer= call should just be in a general keymaps area...

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)
  (global-set-key (kbd "C-x C-k") 'kill-this-buffer)

#+end_src

*** Company

For completion /outside/ the minibuffer.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package company
    :custom
    (company-global-modes '(not shell-mode eaf-mode))
    :config
    (global-company-mode 1))
  ;; (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends)))
#+end_src

** Evil
*** About

The most vital Emacs package for me.

*** The Evil Mode

Evil Mode basic configuration. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil
    :ensure t
    :demand 
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-set-leader ",")
    :config
    (evil-mode 1)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-define-key 'normal 'global (kbd "<leader>k") 'custom-test)
    (evil-global-set-key 'motion "SPC-w" 'custom-test)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

***** TODO Try just using pure evil bindings rather than =general.el=
For my purposes, I think =general.el= is probably overkill and I should try and keep things more simple...

*** General Keybindings

I'm going to use =general.el= to manage some of these bindings. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
    (use-package general
      :ensure t
      :config
      (general-evil-setup t)
      (general-define-key
       :states '(normal visual)
       :prefix "SPC"
       "SPC" 'execute-extended-command
       "r" 'eval-region
       )
      (general-define-key
       :states 'normal
       :prefix "SPC"
       "q" 'evil-quit
       "h" 'evil-window-left
       "j" 'evil-window-down
       "k" 'evil-window-up
       "l" 'evil-window-right
       "b" 'ivy-switch-buffer
       "f" 'find-file
       "tf" 'org-babel-tangle
       "ts" 'org-time-stamp
       "a" 'org-agenda
       "c" 'org-capture
       "d" 'custom-basic-time-date-stamp
       "1" 'delete-other-windows
       "0" 'delete-window
       "2" 'split-window-below
       "3" 'split-window-right
       "+" 'balance-windows
       "." 'custom-time-date-stamp
       "-" 'custom-org-subheading
       ))

#+end_src

Some custom functions...

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

    ;; This is by far the most customised bits of Elisp
    ;; I think I've written in this document! 

    (defun custom-test ()
      "Custom testing function."
      (interactive)
      (insert "Testing! "))

    (defun custom-if-evil-insert-state ()
      "Check if we're using Evil Mode and go into Insert State if so."
      (interactive)
      (if (bound-and-true-p evil-mode)
          (evil-insert-state)))

    (defun custom-org-subheading ()
      "A custom insert-subheading for Org Mode."
      (interactive)
      (if (eq major-mode 'org-mode)
          (org-insert-subheading t))
      (custom-if-evil-insert-state))

  ;; Bind this to something using emacs bindings too! Could be very useful!
    (defun custom-basic-time-date-stamp ()
      "A simple time stamp binding for Org Mode."
      (interactive)
      (insert (format-time-string "\[%Y-%m-%d %a %H:%M\]")))
  
    (defun custom-time-date-stamp ()
      "A custom time/date stamp mainly used in Org Mode for updating notes."
      (interactive)
      (custom-org-subheading)
      (insert "Note ")
      (custom-basic-time-date-stamp)
      (insert ": \n")
      (custom-if-evil-insert-state))

#+end_src

**** Note [2022-09-12 Mon 17:18]: 
This is now working nicely! I like this feature, and in plaintext documents it will omit the org star indentation =(org-insert-subheading)= part.

*** The Evil Collection

Adds evil-bindings to a wide range of Emacs applications without having to do anything!

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** The Evil Commentary

Tim Pope's incredible [[https://github.com/tpope/vim-commentary][commentary.vim]], ported to Evil-mode.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+end_src

*** The Evil Surround

And another Tpope plugin ported to Emacs (which I don't actually use in Vim too much, but want to start using more often), [[https://github.com/tpope/vim-surround][vim-surround]].

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+end_src

*** Undo-Fu

Undo and redo; used by Evil-mode to enable =Ctrl+r= functionality.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package undo-fu)
#+end_src 

** Avy
*** Setup

This plugin is for jumping to text in the current view. I used a similar plugin in Atom, but never tried vim-easymotion. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
(use-package avy
  :ensure t
  :config
  (general-define-key
     :states 'normal
     :prefix "SPC"
     "," 'avy-goto-char))
#+end_src

Not sure if I'll end up using this much right now, but want to try it out. 

** Org
*** About

One of the biggest draws to Emacs, for me, has become Org-mode. 

*** Main Org

This is the main org-mode block.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . here/org-mode-setup)
    (org-mode . here/org-mode-symbols-setup)
    ;; (org-mode . here/org-capture-workflow)
    :config
    (setq org-ellipsis "  ⌄ ")
    (set-face-underline 'org-ellipsis nil)
    (setq header-line-format " ")
    (setq org-agenda-files
          '("~/org/" "~/config/"))
    (setq org-duration-format (quote h:mm))
    (setq org-hide-emphasis-markers t)
    (setq org-startup-folded 'content)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "PEND(p)" "|" "DONE(d)" "CANC(c)")
            (sequence "|" "FIVE(5)" "FOUR(4)" "THRE(3)" "TWO(2)" "ONE(1)")))
    (setq org-priority-faces
          '((?A . (:foreground "red"))
            (?B . (:foreground "orange"))
            (?C . (:foreground "yellow"))))
    (setq org-capture-templates
          '(("w" "Wessex")
            ("wt" "Task" entry (file+headline "~/org/wessex.org" "Tasklist")
             "* TODO  %?\nDEADLINE: %t" :prepend t)
            ("wm" "Meeting" entry (file+headline "~/org/wessex-meetings.org" "On-going")
             "* %U %?\n** (Rough) Minutes\n- What we talked about\n- What someone said\n** Tasks\n*** TODO Something to work on\nDEADLINE: %t\n" :prepend t)
            ("p" "Personal")
            ("pt" "Task" entry (file+headline "~/org/personal.org" "Tasklist")
             "* TODO  %?\nDEADLINE: %t" :prepend t)
            ("pj" "Journal" entry (file+olp+datetree "~/org/journal.org")
             "* Entry for %U\n%?")
            ("pb" "Birthday" entry (file "~/org/misc/birthday.org")
             "* %(config/org-capture-prompt \"Person's Name\" 'persons-name)\nSCHEDULED: %(org-read-date)")
            ("t" "Test")
            ("tr" "Read String" entry (file "~/org/misc/birthday.org")
             "* %(read-string \"In: \")")
            ("tb" "Test Birth" entry (file "~/org/misc/birthday.org")
             "* %(set-variable current-birthday (org-read-date)) and %(current-birthday)")
            ))
    )
#+end_src

**** TODO Create a new org-file for PDF export for work

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  ;; By Storax, https://storax.github.io/blog/2016/05/02/org-capture-tricks/
    (defvar org-capture-hist nil
      "History of prompt answers for org capture.")
    (defun config/org-capture-prompt (prompt variable)
      "PROMPT for string, save it to VARIABLE and insert it."
      (make-local-variable variable)
      (set variable (read-string (concat prompt ": ") nil org-capture-hist)))

    (defun org-document-new (path)
      "Create a new document and prompt for a file name."
      (interactive)
      (let ((name (read-string "Document Name: ")))
        (expand-file-name (format "%s.org" name) path))
      (find-file (insert-file "~/Documents/org-pdf/template.org")))

#+end_src

Note, I do the org-capture-templates part with [[https://emacs.stackexchange.com/questions/30169/set-org-capture-datetree-write-on-top-of-the-file][this]], because I want to put items at the top of the list.

*** Org Blog

I've started using Org-blog for my personal site:

#+begin_src elisp
  (use-package org-static-blog
    :ensure t
    :config
    (setq org-static-blog-publish-title "Hylobatid")
    (setq org-static-blog-publish-url "https://hylobatid.github.io/")
    (setq org-static-blog-publish-directory "~/hylobatid.github.io/")
    (setq org-static-blog-posts-directory "~/hylobatid.github.io/blog/posts/")
    (setq org-static-blog-drafts-directory "~/hylobatid.github.io/blog/drafts/")
    (setq org-static-blog-enable-tags t)
    (setq org-static-blog-use-preview t)
    (setq org-export-with-toc nil)
    (setq org-export-with-section-numbers nil)
    (setq org-static-blog-page-header
          "<meta name=\"author\" content=\"Hylobatid\">
  <meta name=\"referrer\" content=\"no-referrer\">
  <link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" />
  <link rel=\"icon\" href=\"static/favicon.ico\">")
    (setq org-static-blog-page-preamble
          "<div class=\"header\">
    <a href=\"https://hylobatid.github.io\">Hylobatid</a>
  </div>")
    (setq org-static-blog-page-postamble
          "<div id=\"archive\">
    <a href=\"https://hylobatid.github.io/archive.html\">Other posts</a>
  </div>
  <footer>
    Made with <a href=\"https://github.com/bastibe/org-static-blog\">Org</a>.
  </footer>")
    (setq org-static-blog-index-front-matter
          "<h1>Thoughts</h1>\n"))
#+end_src

Lots of it is a work in progress.

*** Font Setup

I started using this setup, below (edited from Davwils /Emacs From Scratch/), but I've subsequently decided upon a more plain configuration (without the Serif fonts I used here):

#+begin_src elisp
  (defun here/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; Set faces for heading levels
    ;; (dolist (face '((org-document-title . 2.0)
    ;;                 (org-level-1 . 1.4)
    ;;                 (org-level-2 . 1.2)
    ;;                 (org-level-3 . 1.1)
    ;;                 (org-level-4 . 1.1)
    ;;                 (org-level-5 . 1.0)
    ;;                 (org-level-6 . 1.0)
    ;;                 (org-level-7 . 1.0)
    ;;                 (org-level-8 . 1.0)))
    ;;   (set-face-attribute (car face) nil :font "ETBookOT" :weight 'Light :height (cdr face)))

    (dolist (face '((org-document-title . 2.0)
                    (org-level-1 . 1.0)
                    (org-level-2 . 1.0)
                    (org-level-3 . 1.0)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
      (set-face-attribute (car face) nil :inherit 'fixed-pitch))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-quote nil :inherit 'fixed-pitch :slant 'italic))
#+end_src

*** Prettify Symbols in Org Mode

I found this method on a Reddit post:

#+begin_src elisp
  (add-hook 'org-mode-hook (lambda ()
                             "Prettify Symbols Setup for Org Documents"
                             (push '("[ ]" . "☐") prettify-symbols-alist)
                             ;;etc.
                             ))
#+end_src

But ended up doing so many it's in its own funcion =here/org-mode-symbols-setup=.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defun here/org-mode-symbols-setup ()
    "Prettify Symbols Setup for Org Documents"
    (push '("[ ]" . "☐") prettify-symbols-alist)
    (push '("[X]" . "☑" ) prettify-symbols-alist)
    (push '("[-]" . "○" ) prettify-symbols-alist)
    (push '("#+BEGIN_SRC" . "→" ) prettify-symbols-alist)
    (push '("#+END_SRC" . "←" ) prettify-symbols-alist)
    (push '("#+begin_src" . "→" ) prettify-symbols-alist)
    (push '("#+end_src" . "←" ) prettify-symbols-alist)
    (push '("#+BEGIN_EXAMPLE" . "e.g. →" ) prettify-symbols-alist)
    (push '("#+END_EXAMPLE" . "←" ) prettify-symbols-alist)
    (push '("#+begin_example" . "e.g. →" ) prettify-symbols-alist)
    (push '("#+end_example" . "←" ) prettify-symbols-alist)
    (push '("#+BEGIN_QUOTE" . "“" ) prettify-symbols-alist)
    (push '("#+END_QUOTE" . "”" ) prettify-symbols-alist)
    (push '("#+begin_quote" . "“" ) prettify-symbols-alist)
    (push '("#+end_quote" . "”" ) prettify-symbols-alist)
    (push '("#+title:" . "⒯") prettify-symbols-alist)
    (push '("#+TITLE:" . "⒯") prettify-symbols-alist)
    (push '("#+options:" . "⌥") prettify-symbols-alist)
    (push '("#+OPTIONS:" . "⌥") prettify-symbols-alist)
    (push '("#+author:" . "⒜") prettify-symbols-alist)
    (push '("#+AUTHOR:" . "⒜") prettify-symbols-alist)
    (push '("#+date:" . "⒟") prettify-symbols-alist)
    (push '("#+DATE:" . "⒟") prettify-symbols-alist)
    (push '("#+description:" . "…") prettify-symbols-alist)
    (push '("#+DESCRIPTION:" . "…") prettify-symbols-alist)
    (push '("#+results:" . " result ⇒ ") prettify-symbols-alist)
    (push '("#+RESULTS:" . " result ⇒ ") prettify-symbols-alist)
    (push '("#+property:" . "∷") prettify-symbols-alist)
    (push '("#+PROPERTY:" . "∷") prettify-symbols-alist)
    (push '("[#A]" . "⬆") prettify-symbols-alist)
    (push '("[#B]" . "■") prettify-symbols-alist)
    (push '("[#C]" . "⬇") prettify-symbols-alist)
    ;; (push '("TODO" . "☐") prettify-symbols-alist)
    ;; (push '("PEND" . "○") prettify-symbols-alist)
    ;; (push '("DONE" . "☑") prettify-symbols-alist)
    ;; (push '("CANC" . "☒") prettify-symbols-alist)
    (prettify-symbols-mode))
#+end_src

*** Org Setup

Including the removal of =variable-line-mode t=.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
 (defun here/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))
 #+end_src

*** Visual Column Mode

Centring org-mode docs. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defun here/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
 (use-package visual-fill-column
    :hook (org-mode . here/org-mode-visual-fill))
 #+end_src

*** Org Bullets

Better bullet points and indentation.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
    ;; (org-bullets-bullet-list '("\u200b" " " "◉" "-")))
   (org-bullets-bullet-list '("●" "○")))

 #+end_src
 
*** Evil Org

Evil stuff for org specifically.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
 #+end_src

*** Org Prettier Tables

Prettier Org tables, please (they're lovely by default, but this makes them even nicer.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; (progn
  ;;   (add-to-list 'load-path "~/.emacs.d/site-lisp")
  ;;   (require 'org-pretty-table)
  ;;   (add-hook 'org-mode-hook (lambda () (org-pretty-table-mode))))
 #+end_src

*** Org Tempo

This allows you to use =<s= to quickly insert a block of script, or =<q= to quickly insert a quote.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (require 'org-tempo)
#+end_src

*** Org Tables Of Content

This is a really nice plugin (that I mainly use for /this very project/) that generates a nice table of contents on the saving of the document. The following is /basically/ taken from the [[https://github.com/snosov1/toc-org][repo]], but it works so I'm happy (and I don't want/need to use it with Markdown).

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src

*** Super Agenda

Not using this /yet/. 

#+begin_src elisp
  (use-package org-super-agenda
    :config
    (let ((org-super-agenda-groups
           '((:name "Today"
                    :time-grid t
                    :todo "TODAY")
             (:name "This Week"
                    :time-grid t
                    :todo "THIS WEEK")
             (:name "Important"
                    ;; Don't need this yet, but:
                    ;; :and (:tag "bills" :tag "another_important_tag")
                    :priority "A")
             (:todo "PENDING" :order 8))))
      (org-agenda nil "a")))
#+end_src

** Eshell
*** About

I mainly use =eshell-prompt-extras= for the shell. 

*** Aliases

Stuff for opening files.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (defalias 'ff 'find-file-other-window)
  (defalias 'e 'find-file-other-window)
  ;;(defalias 'vim 'find-file) ;; afaik this isn't working 

  (defalias 'less 'find-file-read-only-other-window)

#+end_src

Navigation and absolute essentials.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (defalias 'cls '(clear 1))
  (defalias 'd 'dired)
  (defalias 'll '(ls -la))

#+end_src

*** Eshell Prompt Extras

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (use-package eshell-prompt-extras
    :ensure t
    :general
    (general-nmap "SPC e" 'eshell)
    :config
    (with-eval-after-load "esh-opt"
      (autoload 'epe-theme-lambda "eshell-prompt-extras")
      (setq eshell-highlight-prompt nil
            eshell-prompt-function 'epe-theme-lambda)))

#+end_src

** Tramp
*** About

Remote connecting with Tramp.

*** WIP

#+begin_src elisp
  (use-package tramp
    :ensure t
    :config
    (setq tramp-default-method "sshx"))
#+end_src

** Helpful

This is a todo, really. Taken from Daviwils dotfiles.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
  #+end_src

** Magit
*** About

+I need to get this working with my SSH key.+ I'm not using this at the moment, so leaving it commented for a moment. I /will/ make use of it in the future, but it's not a priority.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; (use-package magit
  ;;   :ensure t
  ;;   :defer 5
  ;;   :commands magit-status
  ;;   :custom
  ;;   (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

**** TODO [#C] Get Magit working
<2022-09-02 Fri>

** Snippets
*** About

I use /YASNIPPET/ to create snippets.

*** Yasnippet

It's now working, /a bit/; mainly thanks to [[http://www.howardism.org/Technical/Emacs/templates-tutorial.html][this nice post]]!

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :general
    ;; There's probably a better way...
    (general-nmap "SPC ns" 'config/custom-create-snippet)
    :config
    (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets")))
#+end_src

*** Create Snippets

There's probably a better way to do this, but we use =general-nmap= and =SPC ns= as the binding.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes

  (defun config/custom-create-snippet ()
    (interactive)
    (yas-new-snippet)
    (if (not file-directory-p "~/config/snippets/")
        (copy-directory (locate-user-emacs-file "snippets") "~/config/snippets")))

#+end_src

** Dired
*** Subtree 

[[https://xenodium.com/drill-down-emacs-dired-with-dired-subtree/][Drill down Emacs dired with dired-subtree]], a fairly useful addition to Dired. 

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package dired-subtree :ensure t
    :after dired
    :config
    (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
    (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+end_src

** Language Modes
*** About

Some language-specific stuff, which modes to pick, etc.

*** AutoHotkey

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package ahk-mode
    :config
    (add-to-list 'auto-mode-alist
                 '("\\.ahk" . ahk-mode)))
#+end_src

*** i3

As in, the config file...

#+begin_src elisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp")
  (require 'i3wm-config-mode.el)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/site-lisp/i3wm-config-mode.el :mkdirp yes
    ;;; i3wm-config-mode.el --- Better syntax highlighting for i3wm's config file -*- lexical-binding: t -*-

  ;; Copyright (C) 2020 Alexander Miller

  ;; Author: Alexander Miller <alexanderm@web.de>
  ;; Package-Requires: ((emacs "24.1"))
  ;; Homepage: https://github.com/Alexander-Miller/i3wm-Config-Mode
  ;; Version: 1.0
  ;; Keywords: faces, languages, i3wm, font-lock

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:
  ;; Better syntax highlighting for i3wm's config.  Everything else is inherited
  ;; from `conf-space-mode.'

  ;;; Code:

  (defgroup i3wm-config nil
    "Configuration options for i3wm-config-mode."
    :prefix "i3wm-config-"
    :group 'conf
    :link '(url-link :tag "URL" "https://github.com/Alexander-Miller/i3wm-Config-Mode")
    :link '(emacs-commentary-link :tag "Commentary" "i3wm-config-mode.el"))

  (defface i3wm-config-verb
    '((t :inherit font-lock-function-name-face))
    "Face for actions or verbs like 'set', 'bindsym', 'move' etc.")

  (defface i3wm-config-flag
    '((t :inherit font-lock-type-face))
    "Face for flags like '--release' and '--no-startup-id'.")

  (defface i3wm-config-variable
    '((t :inherit font-lock-constant-face))
    "Face for $variables.")

  (defface i3wm-config-value-assign
    '((t :inherit font-lock-variable-name-face))
    "Face for value assignments - e.g. the 'y' in 'set x y'.")

  (defface i3wm-config-numbers
    '((t :inherit font-lock-constant-face))
    "Face for numbers.")

  (defface i3wm-config-bindsym-key
    '((t :inherit font-lock-variable-name-face))
    "Face for the keys used in bindsym assignments.")

  (defface i3wm-config-unit
    '((t :inherit font-lock-type-face))
    "Face for units like 'px', 'ms', 'ppt'.")

  (defface i3wm-config-for-window-predictate
    '((t :inherit font-lock-builtin-face))
    "Face for the predicates in for_window assignments -
  the 'x' in 'for_window [x=y]'.")

  (defface i3wm-config-exec
    '((t :inherit font-lock-builtin-face))
    "Face for the text inside an exec statement.")

  (defface i3wm-config-adjective
    '((t :inherit font-lock-type-face))
    "Face for adjectives and modifiers like 'floating', 'tabbed', 'sticky' or 'current'.")

  (defface i3wm-config-noun
    '((t :inherit font-lock-keyword-face))
    "Face for fixed noun & keywords like 'workspace', 'mode', 'position' or 'fullscreen'.")

  (defface i3wm-config-constant
    '((t :inherit font-lock-constant-face))
    "Face for constant values like 'top', 'invisble', 'yes' or 'no'.")

  (defface i3wm-config-operator
    '((t :inherit font-lock-builtin-face))
    "Face for various operators like '&&', '+', and '|'.")

  (defface i3wm-config-block-name
    '((t :inherit font-lock-type-face))
    "Face for curly brace delimited block name like 'colors { ... }'.")

  (defvar i3wm-config-font-lock-keywords
    `(
      ;; Bindsym keys
      ( ,(rx
          (group-n 1 "bindsym")
          (0+ space)
          (opt
           (group-n 2 (? "--" (1+ (or alnum "-" "_")))))
          (0+ space)
          (opt
           (or (group-n 3 "$" (1+ alnum))
               (group-n 4 (1+ alnum)))
           (? (group-n 5 "+")))
          (opt
           (or (group-n 6 "$" (1+ alnum))
               (group-n 7 (1+ alnum)))
           (? (group-n 8 "+")))
          (opt
           (or (group-n 9 "$" (1+ alnum))
               (group-n 10 (1+ alnum)))
           (? (group-n 11 "+"))))
        (1 'i3wm-config-verb nil t)
        (2 'i3wm-config-flag nil t)
        (3 'i3wm-config-variable nil t)
        (4 'i3wm-config-bindsym-key nil t)
        (5 'i3wm-config-operator nil t)
        (6 'i3wm-config-variable nil t)
        (7 'i3wm-config-bindsym-key nil t)
        (8 'i3wm-config-operator nil t)
        (9 'i3wm-config-variable nil t)
        (10 'i3wm-config-bindsym-key nil t)
        (11 'i3wm-config-operator nil t))

      ;; set from resource
      ( ,(rx
          (group-n 1 "set_from_resource")
          (0+ space)
          (opt
           (group-n 2 "$" (1+ alnum))
           (opt
            (0+ space)
            (group-n 3 (1+ word))
            (opt
             (0+ space)
             (group-n 4 (1+ any))))))
        (1 'i3wm-config-verb nil t)
        (2 'i3wm-config-variable nil t)
        (3 'i3wm-config-value-assign nil t)
        (4 'i3wm-config-constant nil t))

      ;; Exec
      ( ,(rx
          (group-n 1 "exec" (? "_" (1+ alnum)))
          (0+ space)
          (opt
           (group-n 2 (? "--" (1+ (or alnum "-" "_"))))
           (0+ space)
           (opt
            (group-n 3 (1+ any) eol))))
        (1 'i3wm-config-verb nil t)
        (2 'i3wm-config-flag nil t)
        (3 'i3wm-config-exec nil t))

      ;; floating modifier set
      ( ,(rx
          (group-n 1 "floating_modifier")
          (0+ space)
          (opt
           (group-n 2 "$" (1+ (or "-" "_" alnum)))))
        (1 'i3wm-config-noun nil t)
        (2 'i3wm-config-value-assign nil t))


      ;; Set
      ( ,(rx
          (group-n 1 "set")
          (0+ space)
          (opt
           (group-n 2 "$" (1+ (or "-" "_" alnum)))
           (opt
            (group-n 3 (1+ any) eol))))
        (1 'i3wm-config-verb nil t)
        (2 'i3wm-config-variable nil t)
        (3 'i3wm-config-value-assign nil t))

      ;; Colon assignments
      ( ,(rx (seq
              (1+ nonl)
              ":"
              (group-n 1 (1+ (not (any "\n" "\""))))))
        1
        'i3wm-config-value-assign)

      ;; Block openers
      ( ,(rx (seq
              symbol-start
              (group-n 1 (1+ (or "_" "-" word)))
              symbol-end
              (opt (1+ space) "\"" (0+ any) "\"")
              (1+ space)
              "{"))
        1 'i3wm-config-block-name)

      ;; Verbs
      ( ,(rx
          (seq
           symbol-start
           (or
            "set"
            "disable"
            "set_from_resource"
            "back_and_forth"
            "bindsym"
            "to"
            "or"
            "exec"
            "exec_always"
            "kill"
            "nop"
            "move"
            "show"
            "split"
            "focus"
            "toggle"
            "i3-msg"
            "reload"
            "restart"
            "resize"
            "grow"
            "shrink"
            "plus"
            "minus"
            "enable"
            "assign"
            "for_window"
            "no_focus")
           symbol-end))
        0
        'i3wm-config-verb)

      ;; Adjectives/modifiers
      ( ,(rx (seq
              symbol-start
              (or
               "tabbed"
               "stacking"
               "left"
               "right"
               "up"
               "down"
               "urgent"
               "sticky"
               "current"
               "global"
               "outer"
               "inner"
               "latest"
               "floating"
               "mode_toggle"
               "all"
               "h"
               "v")
              symbol-end))
        0
        'i3wm-config-adjective)

      ;; Nouns
      ( ,(rx (seq
              symbol-start
              (or
               "scratchpad"
               "workspace_auto_back_and_forth"
               "workspace_buttons"
               "workspace"
               "mode"
               "gaps"
               "output"
               "parent"
               "child"
               "container"
               "layout"
               "height"
               "width"
               "focus_follows_mouse"
               "smart_borders"
               "smart_gaps"
               "mouse_warping"
               "force_display_urgency_hint"
               "new_window"
               "new_float"
               "font"
               "focus_on_window_activation"
               "pango"
               "status_command"
               "i3bar_command"
               "border"
               "position"
               "tray_padding"
               "tray_output"
               "strip_workspace_numbers"
               "binding_mode_indicator"
               "background"
               "binding_mode"
               "statusline"
               "separator_symbol"
               "separator"
               "focused_workspace"
               "active_workspace"
               "inactive_workspace"
               "urgent_workspace"
               "number"
               "window"
               "fullscreen")
              symbol-end))
        (0 'i3wm-config-noun nil t))

      ;; numbers
      ( ,(rx (seq
              symbol-start
              (? (or "-" "+"))
              (group-n 1 (1+ num))))
        1
        'i3wm-config-numbers)

      ;; Constants
      ( ,(rx
          (seq
           symbol-start
           (or
            "i3bar"
            "yes"
            "no"
            "on"
            "none"
            "top"
            "invisible"
            "hidden"
            "dock"
            "mouse")
           symbol-end))
        0 'i3wm-config-constant)

      ;; Units
      ( ,(rx (seq
              (? (1+ num))
              (group-n 1 (or "px" "pixel" "ms" "ppt"))
              symbol-end))
        1 'i3wm-config-unit)

      ;; + = | : etc
      ( ,(rx (or "+" "&&" "-" "=" "|" ":" "," ";"))
        0 'i3wm-config-operator)

      ;; for_window predicates
      ( ,(rx (or
              "class"
              "title"
              "instance"
              "window_role"
              "window_type"))
        0 'i3wm-config-for-window-predictate)

      ;; client.*color* assigments
      ( ,(rx (seq
              symbol-start
              (1+ (or "_" word))
              "."
              (1+ (or "_"  word))
              symbol-end))
        0 'i3wm-config-noun)))

  ;;;###autoload
  (define-derived-mode i3wm-config-mode conf-space-mode "i3wm Config"
    (font-lock-add-keywords nil i3wm-config-font-lock-keywords 'set))

  ;;;###autoload
  (add-to-list 'auto-mode-alist '("i3/config\\'" . i3wm-config-mode))

  (provide 'i3wm-config-mode)

  ;;; i3wm-config-mode.el ends here
#+end_src

*** LaTeX

Or should I say XeLaTeX!? (Use XeLaTeX by default export.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq latex-run-command "xelatex")
#+end_src

This extremely helpful [[https://emacs.stackexchange.com/questions/169/how-do-i-reload-a-file-in-a-buffer][Stack Overflow User]] makes my workflow nicer with LaTeX.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (defun here/revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive)
    (revert-buffer :ignore-auto :noconfirm))

  (global-set-key (kbd "C-c C-1") 'here/revert-buffer-no-confirm)
#+end_src

And this allows the PDF document to refresh without confirmation... again, from [[https://stackoverflow.com/questions/42330517/force-docview-mode-to-show-updated-file-without-confirmation][Stack Overflow]]!

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq revert-without-query '(".pdf"))
#+end_src

*** Powershell

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package powershell
    :config
    (add-to-list 'auto-mode-alist
                 '("\\.ps1" . powershell)))
#+end_src

*** Python

Something like this (but more, quite a bit more);

#+begin_src elisp
      (use-package elpy
        :ensure t
        :init
        (elpy-enable)
        :config
        (setq elpy-rpc-python-command "c:/MAMP/bin/python/bin/python.exe"))
#+end_src

**** TODO Python Mode
*** Ruby

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
    (add-to-list 'auto-mode-alist
                 '("\\.\\(?:cap\\|gemspec\\|irbrc\\|gemrc\\|rake\\|rb\\|ru\\|thor\\)\\'" . ruby-mode))
    (add-to-list 'auto-mode-alist
                 '("\\(?:Brewfile\\|Capfile\\|Gemfile\\(?:\\.[a-zA-Z0-9._-]+\\)?\\|[rR]akefile\\)\\'" . ruby-mode))
#+end_src

*** Spell Checking

#+begin_src elisp
  (require 'ispell)
  (setq ispell-program-name "c:/Users/jorchard/aspell/aspell.exe")
  (setq ispell-local-dictionary "en_GB")
  (setq mail-user-agent 'message-user-agent)
  (require 'message-outlook)
#+end_src

*** VBScript

TODO, or not to bother... potentially not worth looking at.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq auto-mode-alist
        (append '(("\\.\\(vbs\\|wsf\\)$" . vbscript-mode))
                auto-mode-alist))
#+end_src

*** Web

A general mode for web-development stuff.

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package web-mode
    :mode
    (("\\.tpl\\.php\\'" . web-mode)
     ("\\.erb\\'" . web-mode)))
#+end_src

*** YAML

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package yaml-mode)
#+end_src

** Fun
*** Discord

Tell /everyone/ on Discord you use Emacs (otherwise what's the point in using it at all)?!

#+begin_src elisp :tangle ~/.emacs.d/init.el :mkdirp yes
    (if (and (eq system-type 'windows-nt)
             (equal user-login-name "julia"))
        (use-package elcord
          :config
          (elcord-mode 1)))
#+end_src

Initially, I wanted to do this by testing to see if =discord= is an executable on the system, but I can't get that's working with Windows easily (and on my work machine I can't do certain things) so in the end I just check if the username is /julia/, which is my home PC username (it was automatically shortened from my email when I logged into the PC with a Microsoft account).

